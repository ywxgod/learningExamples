这是一个纯粹的es6浏览器项目示例，没有用到ui组件库，也没有用到css框架。
用webpack将项目文件，第三方库，样式文件分别打包到不同的文件，html文件由html-webpack-plugin产生。
npm run build:dev 开发版本
npm run build:prod production版本

//////////////////////////////////////////////////////////////////
//项目依赖的各种loader，plugin，工具等
//////////////////////////////////////////////////////////////////
nodemon 用于监测nodejs管理的文件改变，比如webpack.config.js
babel-core 用于解析es6
babel-preset-es2015 在production版本时，由于UglifyJsPlugin插件不支持es6会报

babel-loader 用于加载识别es6模块
css-loader 转换@import与url()为es6的import
style-loader 处理style标签的样式
sass-loader 处理.scss文件
node-sass sass-loader的依赖

file-loader 加载css,scss各个样式文件中的图片，字体等，返回图片的相对地址

webpack 打包
webpack-dev-server 开发环境测试等

html-webpack-plugin 用于生成html文件
extract-text-webpack-plugin 用于将css文件从js中分离出来
webpack.optimize.CommonsChunkPlugin 用于提取公共代码，此插件是webpack自带，用的时候先要require('webpack').

//////////////////////////////////////////////////////////////////
//用到的第三方库
//////////////////////////////////////////////////////////////////
//导入使用lodash
//导入使用jquery

//////////////////////////////////////////////////////////////////
//供测试用到的css，scss文件
//////////////////////////////////////////////////////////////////
//src/app/view/header/header.css
//src/app/view/header/header.scss

//////////////////////////////////////////////////////////////////
//实现细节记录
//////////////////////////////////////////////////////////////////
//TODO: 0. 通过传参数切换production/development模式
	1). 在package.json的scripts块设置命令如：
		"build:dev": "webpack --env development -w"		//development模式
    	"build:prod": "webpack --env production -p"		//production模式
	2). 将webpack.config.js的导出改为函数，此函数接受一个参数，参数类型根据--env的不同而不同。

//TODO: 1. 热加载
	1). webpack-dev-server会和webpack一样读取webpack.config.js
	2). webpack.config.js中增加devServer配置项，具体参考https://webpack.js.org/configuration/dev-server/
	3). 特别说明devServer.contentBase指的是静态文件路径，可以是数组
	4). 用nodemon监测webpack.config.js的改变，devServer增加watchContentBase=true监控静态文件的改变

//TODO: 2. 添加.css文件支持
	1). 安装css-loader, style-loader
	2). webpack.config.js添加相应的loaders,如：{test:/\.css$/, use:['style-loader','css-loader']}
	3). 用import命令直接导入css文件，如:import './header.css'

//TODO: 3. 添加.scss文件支持
	1). 安装node-sass, sass-loader
	2). webpack.config.js添加相应的loaders,
		如：{test:/\.scss$/, use:['style-loader','css-loader','sass-loader']},当然你可以修改第二loaders的为：
		{test:/\.s?css$/, use:['style-loader','css-loader','sass-loader']} 这样既css, scss文件都支持了。

//TODO: 4. 从js文件中分离出css
	1). 安装extract-text-webpack-plugin
	2). 修改 TODO 3 的 loader为：
		{	
			test:/\.s?css$/, 
			use: ExtractTextWebpackPlugin.extract({
				fallback: 'style-loader',
				use: [
					{loader: 'css-loader', options: {modules:true}},
					'saas-loader'
				]
			})
		}
	3). 添加到plugins对象中：
		plugins: [new ExtractTextWebpackPlugin('css_filename.css')]

//TODO: 5. 分离vendor codes
	1). 在plugins中添加CommonsChunkPlugin, 如：
		plugins: [
			new webpack.optimize.CommonsChunkPlugin({
				name: 'vendor',
				minChunks: function(module){
					return module.context&&/node_modules/.test(module.context)
				}
			})
		]
//TODO: 6. 切换到production配置
	1). 安装babel-preset-es2015
	2). 修改babel-loader配置，如下：
		{
			test:/\.js$/,
			use: [
				{
					loader: 'babel-loader',
					options:{
						presets: ['es2015'] //应用babel-preset-es2015
					}
				}
			]
		}
	3). 在plugins中增加： webpack.LoaderOptionsPlugin，如：
		new webpack.LoaderOptionsPlugin({
			minimize: true,
			debug: false
		})
	4). 在plugins中增加: webpack.optimize.UglifyJsPlugin, 如：
		new webpack.optimize.UglifyJsPlugin({
			sourceMap: true,
			beautify: false,
			mangle: {
				screw_ie8: true
			},
			compress: {
				unused: true,
				dead_code: true,
				drop_debugger: true,
				conditionals: true,
				evaluate: true,
				drop_console: true,
				sequences: true,
				booleans: true,
				screw_ie8: true,
				warnings: false
			},
			comments: false
		})
	注：如果不给babel-loader增加{presets:['es2015']}选项，webpack.optimize.UglifyJsPlugin插件会报语法错误。

//TODO: 7. 加载图片样式文件中用到的图片(png,jpg,bmp,svg...)
	1). 安装file-loader
	2). rules里添加：
		{
			test:/\.(png|jpg|jpeg|bmp|svg)$/,
			use: {
				loader: 'file-loader',
				options: {
					name: './images/[name]-[hash:8].[ext]'
				}
			}
		}
//TODO: 8. 处理inline图片,如img标签动态设置图片
	1). 通过import语句直接导入要用到的图片，如：
		import myPhoto from './images/myPhoto.jpg';
		myPhoto值为file-loader设置的name值，可能包括[name],[hash]等
	2). 设置src属性，如: img.src = myPhoto;